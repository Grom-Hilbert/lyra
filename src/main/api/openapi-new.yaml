openapi: 3.0.3
info:
  title: Lyra 企业级文档管理系统 API
  description: |
    Lyra是一个企业级云原生文档管理系统，提供带有版本控制的文档管理服务。
    
    ## 核心功能
    - 用户认证与授权管理
    - 文件上传、下载、管理
    - 文件夹结构化管理
    - 文件搜索与版本控制
    - WebDAV协议支持
    - 权限管理与空间隔离
    
    ## 技术架构
    - **后端**: Spring Boot 3.5.x + Spring Security + JPA
    - **数据库**: SQLite/MySQL/PostgreSQL + Redis
    - **部署**: Docker + Kubernetes + Helm
    
    ## API特性
    - RESTful设计规范
    - JWT令牌认证
    - 统一响应格式
    - 完整的错误处理
    - 分页和排序支持
    - 文件流传输优化
    
  version: "1.0.0"
  termsOfService: https://github.com/your-org/lyra/blob/main/TERMS.md
  contact:
    name: Lyra API Support
    url: https://github.com/your-org/lyra
    email: support@lyra.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: 本地开发环境
  - url: https://api-dev.lyra.example.com
    description: 开发环境
  - url: https://api-staging.lyra.example.com  
    description: 预发布环境
  - url: https://api.lyra.example.com
    description: 生产环境

# ==================== 安全方案 ====================
security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT访问令牌认证。
        
        **获取令牌**: 通过 `/api/auth/login` 端点登录获取访问令牌。
        
        **使用方式**: 在请求头中添加 `Authorization: Bearer <token>`
        
        **令牌刷新**: 使用 `/api/auth/refresh` 端点刷新过期令牌。

  schemas:
    # 通用响应模型
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          description: 操作是否成功
          example: true
        message:
          type: string
          description: 响应消息
          example: "操作成功"
        timestamp:
          type: integer
          format: int64
          description: 响应时间戳
          example: 1642780800000

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [false]
            errors:
              type: array
              items:
                type: string

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码
          minimum: 0
          example: 0
        size:
          type: integer
          description: 每页大小
          default: 20
          example: 20
        totalElements:
          type: integer
          description: 总元素数
          example: 150
        totalPages:
          type: integer
          description: 总页数
          example: 8

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "请求参数验证失败"
            errors: ["用户名不能为空"]
            timestamp: 1642780800000
    
    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "访问令牌无效或已过期"
            timestamp: 1642780800000
    
    Forbidden:
      description: 权限不足
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "权限不足，无法访问此资源"
            timestamp: 1642780800000

  parameters:
    PageParam:
      name: page
      in: query
      description: 页码(从0开始)
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    
    SizeParam:
      name: size
      in: query
      description: 每页大小
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

# ==================== API路径定义 ====================
paths:
  # 认证相关API
  /api/auth/login:
    post:
      tags:
        - 认证管理
      summary: 用户登录
      description: 用户通过用户名/邮箱和密码进行登录认证
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - usernameOrEmail
                - password
              properties:
                usernameOrEmail:
                  type: string
                  description: 用户名或邮箱
                  example: "admin"
                password:
                  type: string
                  description: 密码
                  example: "admin123"
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            description: 访问令牌
                          refreshToken:
                            type: string
                            description: 刷新令牌
                          tokenType:
                            type: string
                            example: "Bearer"
                          expiresIn:
                            type: integer
                            description: 令牌有效期(秒)
                            example: 86400
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # 系统管理API
  /api/admin/system/users:
    get:
      tags:
        - 系统管理
      summary: 获取用户列表
      description: |
        获取系统中所有用户的分页列表，支持搜索和筛选。
        
        **权限要求**: 管理员权限
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: keyword
          in: query
          description: 搜索关键词（用户名、邮箱、昵称）
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: 用户状态筛选
          required: false
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, LOCKED, PENDING]
      responses:
        '200':
          description: 用户列表获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          users:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  format: int64
                                username:
                                  type: string
                                email:
                                  type: string
                                displayName:
                                  type: string
                                status:
                                  type: string
                                  enum: [ACTIVE, INACTIVE, LOCKED, PENDING]
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

# ==================== 标签分组 ====================
tags:
  - name: 认证管理
    description: |
      用户认证相关的API接口，包括登录、注册、令牌管理等功能。
      
      **核心功能**:
      - 用户登录/注册
      - JWT令牌管理
      - 密码重置
      - 会话管理
  
  - name: 系统管理
    description: |
      系统配置和管理相关的API接口，仅限管理员使用。
      
      **核心功能**:
      - 用户管理（查询、创建、更新、删除）
      - 角色权限管理
      - 批量用户操作
      - 用户状态管理
      - 存储配额管理

# ==================== 外部文档链接 ====================
externalDocs:
  description: "Lyra项目文档和开发指南"
  url: "https://github.com/your-org/lyra/wiki"
